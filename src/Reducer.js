import ActionType from './ActionType'

const initialState = {
    questions: {
        byId: {
            0: {
                id: 0,
                value: "‰ªäÊúù„ÅØÊò®Êó•„ÅÆÊúù„Çà„Çä",
                choices: ["Êöë„ÅÑ", "ÂØí„ÅÑ"]
            },
            1: {
                id: 1,
                value: "„Çà„Åè",
                choices: ["Áú†„Çå„Åü", "Áú†„Çå„Å™„Åã„Å£„Åü"]
            },
            2: {
                id: 2,
                value: "„É™„Éì„É≥„Ç∞„Å´ÊúÄÂàù„Å´ÂÖ•„Å£„Åü„ÅÆ„ÅØ",
                choices: ["Â∑¶Ë∂≥", "Âè≥Ë∂≥"]
            },
            3: {
                id: 3,
                value: "Â§ñ„ÅØÊô¥„Çå„Å¶„ÅÑ„Çã„Åã",
                choices: ["„ÅØ„ÅÑ", "„ÅÑ„ÅÑ„Åà"]
            },
            4: {
                id: 4,
                value: "‰ªäÊó•„ÅØÂ§ñÂá∫‰∫àÂÆö„Åå",
                choices: ["„ÅÇ„Çã", "„Å™„ÅÑ"]
            },
            5: {
                id: 5,
                value: "Êò®Êó•„ÇÑ„ÇäÊÆã„Åó„Åü„Çø„Çπ„ÇØ„Åå",
                choices: ["„ÅÇ„Çã", "„Å™„ÅÑ"]
            },
            6: {
                id: 6,
                value: "‰ªäÊó•Êï£Ê≠©„Å´Ë°å„Åè„Å™„Çâ",
                choices: ["Ë•ø„Å∏", "Êù±„Å∏"]
            },
            7: {
                id: 7,
                value: "‰ªäÊó•„ÅØ„Å©„Å°„Çâ„ÇíËÅ¥„ÅèÔºü",
                choices: ["Radiko", "Spotify"]
            },
            8: {
                id: 8,
                value: "„Åæ„Å†Áú†„ÅÑÔºü",
                choices: ["„ÅØ„ÅÑ", "„ÅÑ„ÅÑ„Åà"]
            },
        },
        allIds: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    },
    dishNames: {
        byId: {
            0: { 'id': 0, 'name': 'ÂºÅÂΩì', 'img': 'üç±' },
            1: { 'id': 1, 'name': '„Åä„Å´„Åé„Çä', 'img': 'üçô' },
            2: { 'id': 2, 'name': '„Åî„ÅØ„Çì', 'img': 'üçö' },
            3: { 'id': 3, 'name': '„Ç´„É¨„Éº„É©„Ç§„Çπ', 'img': 'üçõ' },
            4: { 'id': 4, 'name': '„Çπ„Éë„Ç≤„ÉÉ„ÉÜ„Ç£', 'img': 'üçù' },
            5: { 'id': 5, 'name': 'ÂØøÂè∏', 'img': 'üç£' },
            6: { 'id': 6, 'name': 'È£ü„Éë„É≥', 'img': 'üçû' },
            7: { 'id': 7, 'name': '„Éë„É≥„Ç±„Éº„Ç≠', 'img': 'ü•û' },
            8: { 'id': 8, 'name': '„ÉØ„ÉÉ„Éï„É´', 'img': 'üßá' },
            9: { 'id': 9, 'name': '„Éï„É©„Ç§„Éâ„Éù„ÉÜ„Éà', 'img': 'üçü' },
            10: { 'id': 10, 'name': '„Åü„Åæ„Åî', 'img': 'ü•ö' },
            11: { 'id': 11, 'name': '„Çµ„É©„ÉÄ', 'img': 'ü•ó' },
            12: { 'id': 12, 'name': '„Åõ„Çì„Åπ„ÅÑ', 'img': 'üçò' },
            13: { 'id': 13, 'name': '„Åä„Åß„Çì', 'img': 'üç¢' },
            14: { 'id': 14, 'name': '„Å†„Çì„Åî', 'img': 'üç°' },
            15: { 'id': 15, 'name': '„Ç∑„Éß„Éº„Éà„Ç±„Éº„Ç≠', 'img': 'üç∞' },
            16: { 'id': 16, 'name': '„ÅäËå∂', 'img': 'üçµ' },
            17: { 'id': 17, 'name': 'Áâõ‰π≥', 'img': 'ü•õ' },
            18: { 'id': 18, 'name': '„Ç≥„Éº„Éí„Éº', 'img': '‚òï' },
            19: { 'id': 19, 'name': 'Á¥ÖËå∂', 'img': '‚òï' },
            20: { 'id': 20, 'name': '„Å∂„Å®„ÅÜ„Ç∏„É•„Éº„Çπ', 'img': 'üßÉ' },
            21: { 'id': 21, 'name': '„É™„É≥„Ç¥„Ç∏„É•„Éº„Çπ', 'img': 'ü•Ç' },
            22: { 'id': 22, 'name': '„Ç´„É´„Éî„Çπ', 'img': 'ü•õ' },
            23: { 'id': 23, 'name': '„Ç≥„Éº„É©', 'img': 'ü•§' }
        },
        allIds: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    },
    dishTypes: {
        byId: {
            main: { id: 'main', name: '„É°„Ç§„É≥', questionIds: [0, 1, 2], dishNameIds: [0, 1, 2, 3, 4, 5, 6, 7] },
            sub: { id: 'sub', name: '„Çµ„Éñ', questionIds: [3, 4, 5], dishNameIds: [8, 9, 10, 11, 12, 13, 14, 15] },
            drink: { id: 'drink', name: '„Éâ„É™„É≥„ÇØ', questionIds: [6, 7, 8], dishNameIds: [16, 17, 18, 19, 20, 21, 22, 23] },
        },
        allIds: ['main', 'sub', 'drink']
    },
    answers: {
        byId: {},
        allIds: []
    },
    results: {
        byId: {},
        allIds: []
    },
    ui: {
        aboutMe: {
            open: false
        }
    }
}

export const Reducer = (state = initialState, action) => {
    const { type, payload } = action;
    switch (type) {
        case ActionType.OPEN_ABOUTME:
            return {
                ...state,
                ui: {
                    ...state.ui,
                    aboutMe: {
                        ...state.ui.aboutMe,
                        open: true
                    }
                }
            }
            break;
        case ActionType.CLOSE_ABOUTME:
            return {
                ...state,
                ui: {
                    ...state.ui,
                    aboutMe: {
                        ...state.ui.aboutMe,
                        open: false
                    }
                }
            }
            break;
        case ActionType.ANSWERED_QUESTION:
            let newState = { ...state }
            const { questionId, answerValue } = payload

            /* „Åì„ÅÆË≥™ÂïèID„Å´„ÅØÊó¢„Å´Á≠î„Åà„Åü„Åì„Å®„Åå„ÅÇ„Çã„Åã? */
            let hasAnswered = false;
            newState.answers.allIds.forEach(answerId => {
                if (questionId == newState.answers.byId[answerId].questionId) {
                    /* Êó¢„Å´Á≠î„Åà„Åü„Åì„Å®„Åå„ÅÇ„Çã */
                    hasAnswered = true;
                    /* ÂõûÁ≠î„ÅÆÂÜÖÂÆπ„ÅåÂêå„Åò„Å†„Å£„Åü„Çâstate„Å´Â§âÊõ¥„Å™„Åó */
                    if (answerValue == newState.answers.byId[answerId].answerValue) {
                        return newState;
                    }
                    /* ÂõûÁ≠î„ÅÆ‰∏äÊõ∏„Åç */
                    newState = {
                        ...newState,
                        answers: {
                            ...newState.answers,
                            byId: {
                                ...newState.answers.byId,
                                [answerId]: {
                                    ...newState.answers.byId[answerId],
                                    answerValue: answerValue
                                }
                            }

                        }
                    }
                }
            })

            /* Á≠î„Åà„Åü„Åì„Å®„Åå„Å™„ÅÑ */
            if (!hasAnswered) {
                const answerId = newState.answers.allIds.length == 0 ? 0 : Math.max(...newState.answers.allIds) + 1
                /*ÂõûÁ≠î„ÅÆÊñ∞Ë¶è‰ΩúÊàê */
                newState = {
                    ...newState,
                    answers: {
                        ...newState.answers,
                        byId: {
                            ...newState.answers.byId,
                            [answerId]: { id: answerId, questionId: questionId, answerValue: answerValue }
                        },
                        allIds: newState.answers.allIds.concat(answerId)
                    }
                }
            }

            /* Á≠î„Åà„ÅüË≥™ÂïèID„Åå„Å©„ÅÆÁöø„ÅÆÁ®ÆÈ°û„Å´Â±û„Åô„Çã„Åã? */
            let targetDishTypeId = 0;
            newState.dishTypes.allIds.forEach(dishId => {
                if (newState.dishTypes.byId[dishId].questionIds.includes(questionId)) {
                    targetDishTypeId = dishId
                }
            })

            /* „Åù„ÅÆÁöø„ÅÆÁ®ÆÈ°û„ÅÆË≥™Âïè„Å´„ÅØÂÖ®„Å¶Á≠î„Åà„Å¶„ÅÑ„Çã„Åã? */
            let answeredAll = true
            /* „Åù„ÅÆÁöø„ÅÆÁ®ÆÈ°û„ÅÆ„Åù„Çå„Åû„Çå„ÅÆË≥™Âïè„Å´ÂØæ„Åó */
            newState.dishTypes.byId[targetDishTypeId].questionIds.forEach(questionId => {
                let hasAnsweredTheQuestion = false
                /* „Åù„Çå„Åû„Çå„ÅÆÁ≠î„Åà„ÇíË¶ã„Å¶Ë°å„Åè */
                newState.answers.allIds.forEach(answerId => {
                    if (questionId == newState.answers.byId[answerId].questionId) {
                        hasAnsweredTheQuestion = true
                    }
                })
                if (!hasAnsweredTheQuestion) {
                    answeredAll = false;
                }
            })

            if (answeredAll) {
                /* „Åù„ÅÆÁöø„ÅÆÁ®ÆÈ°û„ÅÆÂÜÖÂÆπ„ÇíÊ±∫„ÇÅ„Çã */
                let hash = 0;
                let times = 1;
                newState.dishTypes.byId[targetDishTypeId].questionIds.forEach(questionId => {
                    let answerValue = 0
                    newState.answers.allIds.forEach(answerId => {
                        if (questionId == newState.answers.byId[answerId].questionId) {
                            answerValue = newState.answers.byId[answerId].answerValue
                        }
                    })
                    hash += times * answerValue;
                    times *= 2;
                })
                /* „Åù„ÅÆÁöø„ÅÆÁ®ÆÈ°û„ÅÆÂÜÖÂÆπ„ÅÆÂÄôË£ú„ÅÆhashÁï™ÁõÆ„ÇíÂÜÖÂÆπ„Å®„Åô„Çã */
                let candidateDishNameIds = newState.dishTypes.byId[targetDishTypeId].dishNameIds
                const dishNameId = candidateDishNameIds[hash]

                /* Êó¢„Å´„Åù„ÅÆÁöø„ÅÆÁ®ÆÈ°û„ÅÆÂÜÖÂÆπ„ÇíÊ±∫„ÇÅ„Åü„Åì„Å®„Åå„ÅÇ„Çã„Åã? */
                let hasDecided = false;
                newState.results.allIds.forEach(resultId => {
                    if (targetDishTypeId == newState.results.byId[resultId].dishTypeId) {
                        /* Ê±∫„ÇÅ„Åü„Åì„Å®„Åå„ÅÇ„Çã„Å™„Çâ„ÄÅ‰∏äÊõ∏„Åç„Åô„Çã */
                        newState = {
                            ...newState,
                            results: {
                                ...newState.results,
                                byId: {
                                    ...newState.results.byId,
                                    [resultId]: {
                                        ...newState.results.byId[resultId],
                                        dishNameId: dishNameId
                                    }
                                }
                            }
                        }
                        hasDecided = true
                    }
                })
                if (!hasDecided) {
                    const resultId = newState.results.allIds.length == 0 ? 0 : Math.max(...newState.results.allIds) + 1
                    /*Ê±∫„ÇÅ„Åü„Åì„Å®„Åå„Å™„ÅÑ„Å™„Çâ„ÄÅÂÜÖÂÆπ„ÅÆÊñ∞Ë¶è‰ΩúÊàê */
                    newState = {
                        ...newState,
                        results: {
                            ...newState.results,
                            byId: {
                                ...newState.results.byId,
                                [resultId]: { id: resultId, dishTypeId: targetDishTypeId, dishNameId: dishNameId }
                            },
                            allIds: newState.results.allIds.concat(resultId)
                        }
                    }
                }

            }

            console.log(newState);
            return newState
        default:
            return state
    }
}